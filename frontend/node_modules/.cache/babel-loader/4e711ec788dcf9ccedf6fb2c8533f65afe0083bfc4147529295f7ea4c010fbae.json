{"ast":null,"code":"'use client';\n\nimport { toRgba } from '../to-rgba/to-rgba.mjs';\nfunction lighten(color, alpha) {\n  if (color.startsWith(\"var(\")) {\n    return color;\n  }\n  var _toRgba = toRgba(color),\n    r = _toRgba.r,\n    g = _toRgba.g,\n    b = _toRgba.b,\n    a = _toRgba.a;\n  var light = function light(input) {\n    return Math.round(input + (255 - input) * alpha);\n  };\n  return \"rgba(\".concat(light(r), \", \").concat(light(g), \", \").concat(light(b), \", \").concat(a, \")\");\n}\nexport { lighten };","map":{"version":3,"names":["lighten","color","alpha","startsWith","_toRgba","toRgba","r","g","b","a","light","input","Math","round","concat"],"sources":["C:\\Users\\vintd\\Documents\\GitHub\\Reserv\\frontend\\node_modules\\@mantine\\core\\src\\core\\MantineProvider\\color-functions\\lighten\\lighten.ts"],"sourcesContent":["import { toRgba } from '../to-rgba/to-rgba';\n\nexport function lighten(color: string, alpha: number) {\n  if (color.startsWith('var(')) {\n    return color;\n  }\n\n  const { r, g, b, a } = toRgba(color);\n\n  const light = (input: number) => Math.round(input + (255 - input) * alpha);\n\n  return `rgba(${light(r)}, ${light(g)}, ${light(b)}, ${a})`;\n}\n"],"mappings":";;;AACO,SAASA,OAAOA,CAACC,KAAK,EAAEC,KAAK,EAAE;EACpC,IAAID,KAAK,CAACE,UAAU,CAAC,MAAM,CAAC,EAAE;IAC5B,OAAOF,KAAK;EAChB;EACE,IAAAG,OAAA,GAAuBC,MAAM,CAACJ,KAAK,CAAC;IAA5BK,CAAC,GAAAF,OAAA,CAADE,CAAC;IAAEC,CAAC,GAAAH,OAAA,CAADG,CAAC;IAAEC,CAAC,GAAAJ,OAAA,CAADI,CAAC;IAAEC,CAAC,GAAAL,OAAA,CAADK,CAAC;EAClB,IAAMC,KAAK,GAAG,SAARA,KAAKA,CAAIC,KAAK;IAAA,OAAKC,IAAI,CAACC,KAAK,CAACF,KAAK,GAAG,CAAC,GAAG,GAAGA,KAAK,IAAIT,KAAK,CAAC;EAAA;EAClE,eAAAY,MAAA,CAAeJ,KAAK,CAACJ,CAAC,CAAC,QAAAQ,MAAA,CAAKJ,KAAK,CAACH,CAAC,CAAC,QAAAO,MAAA,CAAKJ,KAAK,CAACF,CAAC,CAAC,QAAAM,MAAA,CAAKL,CAAC;AACzD"},"metadata":{},"sourceType":"module","externalDependencies":[]}