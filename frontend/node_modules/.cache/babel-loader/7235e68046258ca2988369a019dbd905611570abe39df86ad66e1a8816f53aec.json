{"ast":null,"code":"'use client';\n\nimport _createForOfIteratorHelper from \"C:/Users/vintd/Documents/GitHub/Reserv/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { isOptionsGroup } from './is-options-group.mjs';\nfunction validateOptions(options) {\n  var valuesSet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /* @__PURE__ */new Set();\n  if (!Array.isArray(options)) {\n    return;\n  }\n  var _iterator = _createForOfIteratorHelper(options),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var option = _step.value;\n      if (isOptionsGroup(option)) {\n        validateOptions(option.items, valuesSet);\n      } else {\n        if (typeof option.value === \"undefined\") {\n          throw new Error(\"[@mantine/core] Each option must have value property\");\n        }\n        if (typeof option.value !== \"string\") {\n          throw new Error(\"[@mantine/core] Option value must be a string, other data formats are not supported, got \".concat(typeof option.value));\n        }\n        if (valuesSet.has(option.value)) {\n          throw new Error(\"[@mantine/core] Duplicate options are not supported. Option with value \\\"\".concat(option.value, \"\\\" was provided more than once\"));\n        }\n        valuesSet.add(option.value);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nexport { validateOptions };","map":{"version":3,"names":["validateOptions","options","valuesSet","arguments","length","undefined","Set","Array","isArray","_iterator","_createForOfIteratorHelper","_step","s","n","done","option","value","isOptionsGroup","items","Error","concat","has","add","err","e","f"],"sources":["C:\\Users\\vintd\\Documents\\GitHub\\Reserv\\frontend\\node_modules\\@mantine\\core\\src\\components\\Combobox\\OptionsDropdown\\validate-options.ts"],"sourcesContent":["import { isOptionsGroup } from './is-options-group';\n\nexport function validateOptions(options: any[], valuesSet = new Set()) {\n  if (!Array.isArray(options)) {\n    return;\n  }\n\n  for (const option of options) {\n    if (isOptionsGroup(option)) {\n      validateOptions(option.items, valuesSet);\n    } else {\n      if (typeof option.value === 'undefined') {\n        throw new Error('[@mantine/core] Each option must have value property');\n      }\n\n      if (typeof option.value !== 'string') {\n        throw new Error(\n          `[@mantine/core] Option value must be a string, other data formats are not supported, got ${typeof option.value}`\n        );\n      }\n\n      if (valuesSet.has(option.value)) {\n        throw new Error(\n          `[@mantine/core] Duplicate options are not supported. Option with value \"${option.value}\" was provided more than once`\n        );\n      }\n\n      valuesSet.add(option.value);\n    }\n  }\n}\n"],"mappings":";;;;AACO,SAASA,eAAeA,CAACC,OAAO,EAAyC;EAAA,IAAvCC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,qBAAmB,IAAIG,GAAG,EAAE;EAC5E,IAAI,CAACC,KAAK,CAACC,OAAO,CAACP,OAAO,CAAC,EAAE;IAC3B;EACJ;EAAG,IAAAQ,SAAA,GAAAC,0BAAA,CACoBT,OAAO;IAAAU,KAAA;EAAA;IAA5B,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA8B;MAAA,IAAnBC,MAAM,GAAAJ,KAAA,CAAAK,KAAA;MACf,IAAIC,cAAc,CAACF,MAAM,CAAC,EAAE;QAC1Bf,eAAe,CAACe,MAAM,CAACG,KAAK,EAAEhB,SAAS,CAAC;MAC9C,CAAK,MAAM;QACL,IAAI,OAAOa,MAAM,CAACC,KAAK,KAAK,WAAW,EAAE;UACvC,MAAM,IAAIG,KAAK,CAAC,sDAAsD,CAAC;QAC/E;QACM,IAAI,OAAOJ,MAAM,CAACC,KAAK,KAAK,QAAQ,EAAE;UACpC,MAAM,IAAIG,KAAK,6FAAAC,MAAA,CAC+E,OAAOL,MAAM,CAACC,KAAK,CACzH,CAAS;QACT;QACM,IAAId,SAAS,CAACmB,GAAG,CAACN,MAAM,CAACC,KAAK,CAAC,EAAE;UAC/B,MAAM,IAAIG,KAAK,6EAAAC,MAAA,CAC8DL,MAAM,CAACC,KAAK,mCACjG,CAAS;QACT;QACMd,SAAS,CAACoB,GAAG,CAACP,MAAM,CAACC,KAAK,CAAC;MACjC;IACA;EAAG,SAAAO,GAAA;IAAAd,SAAA,CAAAe,CAAA,CAAAD,GAAA;EAAA;IAAAd,SAAA,CAAAgB,CAAA;EAAA;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}