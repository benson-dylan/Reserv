{"ast":null,"code":"'use client';\n\nfunction isMultiLine(code) {\n  const placeholderLine = code.split(\"\\n\").find(line => line.includes(\"{{props}}\"));\n  return placeholderLine && placeholderLine.trim().startsWith(\"{{props}}\");\n}\nfunction injectProps(props, code) {\n  const propStrings = [];\n  const multiline = isMultiLine(code);\n  const replacedChildrenCode = code.replace(\"{{children}}\", props.children || \"\");\n  for (const [key, value] of Object.entries(props)) {\n    if (key !== \"children\") {\n      if (typeof value === \"string\") {\n        propStrings.push(`${key}=\"${value}\"`);\n      } else if (typeof value === \"number\") {\n        propStrings.push(`${key}={${value}}`);\n      } else if (typeof value === \"boolean\") {\n        if (value) {\n          propStrings.push(key);\n        } else {\n          propStrings.push(`${key}={false}`);\n        }\n      }\n    }\n  }\n  if (!multiline) {\n    const joined = propStrings.join(\" \");\n    return joined.length > 0 ? replacedChildrenCode.replace(\"{{props}}\", ` ${joined}`) : replacedChildrenCode.replace(\"{{props}}\", \"\");\n  }\n  const placeholderRegex = /^(\\s*){{props}}(\\s*)$/gm;\n  const result = replacedChildrenCode.replace(placeholderRegex, (_, before, after) => {\n    const propsWithWhitespace = propStrings.map((propString, index) => `${before}${propString}${index !== propStrings.length - 1 ? \"\\n\" : \"\"}`).join(\"\");\n    return `${propsWithWhitespace}${after}`;\n  });\n  return result.trim().replace(\"\\n\\n\", \"\\n\");\n}\nexport { injectProps };","map":{"version":3,"names":["isMultiLine","code","placeholderLine","split","find","line","includes","trim","startsWith","injectProps","props","propStrings","multiline","replacedChildrenCode","replace","children","key","value","Object","entries","push","joined","join","length","placeholderRegex","result","_","before","after","propsWithWhitespace","map","propString","index"],"sources":["C:\\Users\\vintd\\Documents\\GitHub\\Reserv\\frontend\\node_modules\\@mantine\\ds\\src\\ConfiguratorDemo\\inject-props.tsx"],"sourcesContent":["function isMultiLine(code: string) {\n  const placeholderLine = code.split('\\n').find((line) => line.includes('{{props}}'));\n  return placeholderLine && placeholderLine.trim().startsWith('{{props}}');\n}\n\n/* eslint-disable no-restricted-syntax */\nexport function injectProps(props: any, code: string) {\n  const propStrings: string[] = [];\n  const multiline = isMultiLine(code);\n  const replacedChildrenCode = code.replace('{{children}}', props.children || '');\n\n  for (const [key, value] of Object.entries(props)) {\n    if (key !== 'children') {\n      if (typeof value === 'string') {\n        propStrings.push(`${key}=\"${value}\"`);\n      } else if (typeof value === 'number') {\n        propStrings.push(`${key}={${value}}`);\n      } else if (typeof value === 'boolean') {\n        if (value) {\n          propStrings.push(key);\n        } else {\n          propStrings.push(`${key}={false}`);\n        }\n      }\n    }\n  }\n\n  if (!multiline) {\n    const joined = propStrings.join(' ');\n    return joined.length > 0\n      ? replacedChildrenCode.replace('{{props}}', ` ${joined}`)\n      : replacedChildrenCode.replace('{{props}}', '');\n  }\n\n  const placeholderRegex = /^(\\s*){{props}}(\\s*)$/gm;\n\n  const result = replacedChildrenCode.replace(placeholderRegex, (_, before, after) => {\n    const propsWithWhitespace = propStrings\n      .map(\n        (propString, index) =>\n          `${before}${propString}${index !== propStrings.length - 1 ? '\\n' : ''}`\n      )\n      .join('');\n    return `${propsWithWhitespace}${after}`;\n  });\n\n  return result.trim().replace('\\n\\n', '\\n');\n}\n"],"mappings":";;AAAA,SAASA,WAAWA,CAACC,IAAI,EAAE;EACzB,MAAMC,eAAe,GAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC,CAACC,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,QAAQ,CAAC,WAAW,CAAC,CAAC;EACnF,OAAOJ,eAAe,IAAIA,eAAe,CAACK,IAAI,EAAE,CAACC,UAAU,CAAC,WAAW,CAAC;AAC1E;AACO,SAASC,WAAWA,CAACC,KAAK,EAAET,IAAI,EAAE;EACvC,MAAMU,WAAW,GAAG,EAAE;EACtB,MAAMC,SAAS,GAAGZ,WAAW,CAACC,IAAI,CAAC;EACnC,MAAMY,oBAAoB,GAAGZ,IAAI,CAACa,OAAO,CAAC,cAAc,EAAEJ,KAAK,CAACK,QAAQ,IAAI,EAAE,CAAC;EAC/E,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACT,KAAK,CAAC,EAAE;IAChD,IAAIM,GAAG,KAAK,UAAU,EAAE;MACtB,IAAI,OAAOC,KAAK,KAAK,QAAQ,EAAE;QAC7BN,WAAW,CAACS,IAAI,CAAE,GAAEJ,GAAI,KAAIC,KAAM,GAAE,CAAC;MAC7C,CAAO,MAAM,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QACpCN,WAAW,CAACS,IAAI,CAAE,GAAEJ,GAAI,KAAIC,KAAM,GAAE,CAAC;MAC7C,CAAO,MAAM,IAAI,OAAOA,KAAK,KAAK,SAAS,EAAE;QACrC,IAAIA,KAAK,EAAE;UACTN,WAAW,CAACS,IAAI,CAACJ,GAAG,CAAC;QAC/B,CAAS,MAAM;UACLL,WAAW,CAACS,IAAI,CAAE,GAAEJ,GAAI,UAAS,CAAC;QAC5C;MACA;IACA;EACA;EACE,IAAI,CAACJ,SAAS,EAAE;IACd,MAAMS,MAAM,GAAGV,WAAW,CAACW,IAAI,CAAC,GAAG,CAAC;IACpC,OAAOD,MAAM,CAACE,MAAM,GAAG,CAAC,GAAGV,oBAAoB,CAACC,OAAO,CAAC,WAAW,EAAG,IAAGO,MAAO,EAAC,CAAC,GAAGR,oBAAoB,CAACC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;EACtI;EACE,MAAMU,gBAAgB,GAAG,yBAAyB;EAClD,MAAMC,MAAM,GAAGZ,oBAAoB,CAACC,OAAO,CAACU,gBAAgB,EAAE,CAACE,CAAC,EAAEC,MAAM,EAAEC,KAAK,KAAK;IAClF,MAAMC,mBAAmB,GAAGlB,WAAW,CAACmB,GAAG,CACzC,CAACC,UAAU,EAAEC,KAAK,KAAM,GAAEL,MAAO,GAAEI,UAAW,GAAEC,KAAK,KAAKrB,WAAW,CAACY,MAAM,GAAG,CAAC,GAAG,IAAI,GAAG,EAAG,EACnG,CAAK,CAACD,IAAI,CAAC,EAAE,CAAC;IACV,OAAQ,GAAEO,mBAAoB,GAAED,KAAM,EAAC;EAC3C,CAAG,CAAC;EACF,OAAOH,MAAM,CAAClB,IAAI,EAAE,CAACO,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC;AAC5C"},"metadata":{},"sourceType":"module","externalDependencies":[]}