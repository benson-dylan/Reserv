{"ast":null,"code":"'use client';\n\nfunction scaleRem(remValue) {\n  return \"calc(\".concat(remValue, \" * var(--mantine-scale))\");\n}\nfunction createConverter(units) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref$shouldScale = _ref.shouldScale,\n    shouldScale = _ref$shouldScale === void 0 ? false : _ref$shouldScale;\n  return function (value) {\n    if (value === 0 || value === \"0\") {\n      return \"0\";\n    }\n    if (typeof value === \"number\") {\n      var val = \"\".concat(value / 16).concat(units);\n      return shouldScale ? scaleRem(val) : val;\n    }\n    if (typeof value === \"string\") {\n      if (value.includes(\"calc(\") || value.includes(\"var(\")) {\n        return value;\n      }\n      if (value.includes(units)) {\n        return shouldScale ? scaleRem(value) : value;\n      }\n      var replaced = value.replace(\"px\", \"\");\n      if (!Number.isNaN(Number(replaced))) {\n        var _val = \"\".concat(Number(replaced) / 16).concat(units);\n        return shouldScale ? scaleRem(_val) : _val;\n      }\n    }\n    return value;\n  };\n}\nvar rem = createConverter(\"rem\", {\n  shouldScale: true\n});\nvar em = createConverter(\"em\");\nexport { em, rem };","map":{"version":3,"names":["scaleRem","remValue","concat","createConverter","units","_ref","arguments","length","undefined","_ref$shouldScale","shouldScale","value","val","includes","replaced","replace","Number","isNaN","rem","em"],"sources":["C:\\Users\\vintd\\Documents\\GitHub\\Reserv\\frontend\\node_modules\\@mantine\\core\\src\\core\\utils\\units-converters\\rem.ts"],"sourcesContent":["function scaleRem(remValue: string) {\n  return `calc(${remValue} * var(--mantine-scale))`;\n}\n\nfunction createConverter(units: string, { shouldScale = false } = {}) {\n  return (value: unknown) => {\n    if (value === 0 || value === '0') {\n      return '0';\n    }\n\n    if (typeof value === 'number') {\n      const val = `${value / 16}${units}`;\n      return shouldScale ? scaleRem(val) : val;\n    }\n\n    if (typeof value === 'string') {\n      if (value.includes('calc(') || value.includes('var(')) {\n        return value;\n      }\n\n      if (value.includes(units)) {\n        return shouldScale ? scaleRem(value) : value;\n      }\n\n      const replaced = value.replace('px', '');\n      if (!Number.isNaN(Number(replaced))) {\n        const val = `${Number(replaced) / 16}${units}`;\n        return shouldScale ? scaleRem(val) : val;\n      }\n    }\n\n    return value as string;\n  };\n}\n\nexport const rem = createConverter('rem', { shouldScale: true });\nexport const em = createConverter('em');\n"],"mappings":";;AAAA,SAASA,QAAQA,CAACC,QAAQ,EAAE;EAC1B,eAAAC,MAAA,CAAeD,QAAQ;AACzB;AACA,SAASE,eAAeA,CAACC,KAAK,EAAgC;EAAA,IAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAE;IAAAG,gBAAA,GAAAJ,IAAA,CAA1BK,WAAW;IAAXA,WAAW,GAAAD,gBAAA,cAAG,KAAK,GAAAA,gBAAA;EACnD,OAAO,UAACE,KAAK,EAAK;IAChB,IAAIA,KAAK,KAAK,CAAC,IAAIA,KAAK,KAAK,GAAG,EAAE;MAChC,OAAO,GAAG;IAChB;IACI,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,IAAMC,GAAG,MAAAV,MAAA,CAAMS,KAAK,GAAG,EAAE,EAAAT,MAAA,CAAGE,KAAK,CAAE;MACnC,OAAOM,WAAW,GAAGV,QAAQ,CAACY,GAAG,CAAC,GAAGA,GAAG;IAC9C;IACI,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;MAC7B,IAAIA,KAAK,CAACE,QAAQ,CAAC,OAAO,CAAC,IAAIF,KAAK,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE;QACrD,OAAOF,KAAK;MACpB;MACM,IAAIA,KAAK,CAACE,QAAQ,CAACT,KAAK,CAAC,EAAE;QACzB,OAAOM,WAAW,GAAGV,QAAQ,CAACW,KAAK,CAAC,GAAGA,KAAK;MACpD;MACM,IAAMG,QAAQ,GAAGH,KAAK,CAACI,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;MACxC,IAAI,CAACC,MAAM,CAACC,KAAK,CAACD,MAAM,CAACF,QAAQ,CAAC,CAAC,EAAE;QACnC,IAAMF,IAAG,MAAAV,MAAA,CAAMc,MAAM,CAACF,QAAQ,CAAC,GAAG,EAAE,EAAAZ,MAAA,CAAGE,KAAK,CAAE;QAC9C,OAAOM,WAAW,GAAGV,QAAQ,CAACY,IAAG,CAAC,GAAGA,IAAG;MAChD;IACA;IACI,OAAOD,KAAK;EAChB,CAAG;AACH;AACY,IAACO,GAAG,GAAGf,eAAe,CAAC,KAAK,EAAE;EAAEO,WAAW,EAAE;AAAI,CAAE;AACnD,IAACS,EAAE,GAAGhB,eAAe,CAAC,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}