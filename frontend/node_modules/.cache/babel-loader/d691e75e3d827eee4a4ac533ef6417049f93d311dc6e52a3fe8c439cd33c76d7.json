{"ast":null,"code":"'use client';\n\nimport { getClassName } from './get-class-name/get-class-name.mjs';\nimport { getStyle } from './get-style/get-style.mjs';\nimport { useMantineTheme } from '../../MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useMantineClassNamesPrefix } from '../../MantineProvider/Mantine.context.mjs';\nfunction useStyles(_ref) {\n  var name = _ref.name,\n    classes = _ref.classes,\n    props = _ref.props,\n    stylesCtx = _ref.stylesCtx,\n    className = _ref.className,\n    style = _ref.style,\n    _ref$rootSelector = _ref.rootSelector,\n    rootSelector = _ref$rootSelector === void 0 ? \"root\" : _ref$rootSelector,\n    unstyled = _ref.unstyled,\n    classNames = _ref.classNames,\n    styles = _ref.styles,\n    vars = _ref.vars,\n    varsResolver = _ref.varsResolver;\n  var theme = useMantineTheme();\n  var classNamesPrefix = useMantineClassNamesPrefix();\n  var themeName = (Array.isArray(name) ? name : [name]).filter(function (n) {\n    return n;\n  });\n  return function (selector, options) {\n    return {\n      className: getClassName({\n        theme: theme,\n        options: options,\n        themeName: themeName,\n        selector: selector,\n        classNamesPrefix: classNamesPrefix,\n        classNames: classNames,\n        classes: classes,\n        unstyled: unstyled,\n        className: className,\n        rootSelector: rootSelector,\n        props: props,\n        stylesCtx: stylesCtx\n      }),\n      style: getStyle({\n        theme: theme,\n        themeName: themeName,\n        selector: selector,\n        options: options,\n        props: props,\n        stylesCtx: stylesCtx,\n        rootSelector: rootSelector,\n        styles: styles,\n        style: style,\n        vars: vars,\n        varsResolver: varsResolver\n      })\n    };\n  };\n}\nexport { useStyles };","map":{"version":3,"names":["useStyles","_ref","name","classes","props","stylesCtx","className","style","_ref$rootSelector","rootSelector","unstyled","classNames","styles","vars","varsResolver","theme","useMantineTheme","classNamesPrefix","useMantineClassNamesPrefix","themeName","Array","isArray","filter","n","selector","options","getClassName","getStyle"],"sources":["C:\\Users\\vintd\\Documents\\GitHub\\Reserv\\frontend\\node_modules\\@mantine\\core\\src\\core\\styles-api\\use-styles\\use-styles.ts"],"sourcesContent":["import { CSSProperties } from 'react';\nimport { useMantineTheme, useMantineClassNamesPrefix } from '../../MantineProvider';\nimport type { MantineStyleProp } from '../../Box';\nimport { FactoryPayload } from '../../factory';\nimport { PartialVarsResolver, VarsResolver } from '../create-vars-resolver/create-vars-resolver';\nimport { getClassName } from './get-class-name/get-class-name';\nimport { getStyle } from './get-style/get-style';\nimport { Styles, ClassNames, GetStylesApiOptions, ClassNamesArray } from '../styles-api.types';\n\nexport interface UseStylesInput<Payload extends FactoryPayload> {\n  name: string | (string | undefined)[];\n  classes: Payload['stylesNames'] extends string ? Record<string, string> : never;\n  props: Payload['props'];\n  stylesCtx?: Payload['ctx'];\n  className?: string;\n  style?: MantineStyleProp;\n  rootSelector?: Payload['stylesNames'];\n  unstyled?: boolean;\n  classNames?: ClassNames<Payload> | ClassNamesArray<Payload>;\n  styles?: Styles<Payload>;\n  vars?: PartialVarsResolver<Payload>;\n  varsResolver?: VarsResolver<Payload>;\n}\n\nexport type GetStylesApi<Payload extends FactoryPayload> = (\n  selector: NonNullable<Payload['stylesNames']>,\n  options?: GetStylesApiOptions\n) => {\n  className: string;\n  style: CSSProperties;\n};\n\nexport function useStyles<Payload extends FactoryPayload>({\n  name,\n  classes,\n  props,\n  stylesCtx,\n  className,\n  style,\n  rootSelector = 'root' as NonNullable<Payload['stylesNames']>,\n  unstyled,\n  classNames,\n  styles,\n  vars,\n  varsResolver,\n}: UseStylesInput<Payload>): GetStylesApi<Payload> {\n  const theme = useMantineTheme();\n  const classNamesPrefix = useMantineClassNamesPrefix();\n  const themeName = (Array.isArray(name) ? name : [name]).filter((n) => n) as string[];\n\n  return (selector, options) => ({\n    className: getClassName({\n      theme,\n      options,\n      themeName,\n      selector,\n      classNamesPrefix,\n      classNames,\n      classes,\n      unstyled,\n      className,\n      rootSelector,\n      props,\n      stylesCtx,\n    }),\n\n    style: getStyle({\n      theme,\n      themeName,\n      selector,\n      options,\n      props,\n      stylesCtx,\n      rootSelector,\n      styles,\n      style,\n      vars,\n      varsResolver,\n    }),\n  });\n}\n"],"mappings":";;;;;;AAGO,SAASA,SAASA,CAAAC,IAAA,EAatB;EAAA,IAZDC,IAAI,GAAAD,IAAA,CAAJC,IAAI;IACJC,OAAO,GAAAF,IAAA,CAAPE,OAAO;IACPC,KAAK,GAAAH,IAAA,CAALG,KAAK;IACLC,SAAS,GAAAJ,IAAA,CAATI,SAAS;IACTC,SAAS,GAAAL,IAAA,CAATK,SAAS;IACTC,KAAK,GAAAN,IAAA,CAALM,KAAK;IAAAC,iBAAA,GAAAP,IAAA,CACLQ,YAAY;IAAZA,YAAY,GAAAD,iBAAA,cAAG,MAAM,GAAAA,iBAAA;IACrBE,QAAQ,GAAAT,IAAA,CAARS,QAAQ;IACRC,UAAU,GAAAV,IAAA,CAAVU,UAAU;IACVC,MAAM,GAAAX,IAAA,CAANW,MAAM;IACNC,IAAI,GAAAZ,IAAA,CAAJY,IAAI;IACJC,YAAY,GAAAb,IAAA,CAAZa,YAAY;EAEZ,IAAMC,KAAK,GAAGC,eAAe,EAAE;EAC/B,IAAMC,gBAAgB,GAAGC,0BAA0B,EAAE;EACrD,IAAMC,SAAS,GAAG,CAACC,KAAK,CAACC,OAAO,CAACnB,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC,EAAEoB,MAAM,CAAC,UAACC,CAAC;IAAA,OAAKA,CAAC;EAAA,EAAC;EACxE,OAAO,UAACC,QAAQ,EAAEC,OAAO;IAAA,OAAM;MAC7BnB,SAAS,EAAEoB,YAAY,CAAC;QACtBX,KAAK,EAALA,KAAK;QACLU,OAAO,EAAPA,OAAO;QACPN,SAAS,EAATA,SAAS;QACTK,QAAQ,EAARA,QAAQ;QACRP,gBAAgB,EAAhBA,gBAAgB;QAChBN,UAAU,EAAVA,UAAU;QACVR,OAAO,EAAPA,OAAO;QACPO,QAAQ,EAARA,QAAQ;QACRJ,SAAS,EAATA,SAAS;QACTG,YAAY,EAAZA,YAAY;QACZL,KAAK,EAALA,KAAK;QACLC,SAAS,EAATA;MACN,CAAK,CAAC;MACFE,KAAK,EAAEoB,QAAQ,CAAC;QACdZ,KAAK,EAALA,KAAK;QACLI,SAAS,EAATA,SAAS;QACTK,QAAQ,EAARA,QAAQ;QACRC,OAAO,EAAPA,OAAO;QACPrB,KAAK,EAALA,KAAK;QACLC,SAAS,EAATA,SAAS;QACTI,YAAY,EAAZA,YAAY;QACZG,MAAM,EAANA,MAAM;QACNL,KAAK,EAALA,KAAK;QACLM,IAAI,EAAJA,IAAI;QACJC,YAAY,EAAZA;MACN,CAAK;IACL,CAAG;EAAA,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}