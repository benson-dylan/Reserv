{"ast":null,"code":"'use client';\n\nimport dayjs from 'dayjs';\nimport { isAfterMinDate } from '../is-after-min-date/is-after-min-date.mjs';\nimport { isBeforeMaxDate } from '../is-before-max-date/is-before-max-date.mjs';\nimport { isSameMonth } from '../is-same-month/is-same-month.mjs';\nfunction getDateInTabOrder(dates, minDate, maxDate, getDateControlProps, excludeDate, hideOutsideDates, month) {\n  const enabledDates = dates.flat().filter(date => {\n    var _a;\n    return isBeforeMaxDate(date, maxDate) && isAfterMinDate(date, minDate) && !(excludeDate == null ? void 0 : excludeDate(date)) && !((_a = getDateControlProps == null ? void 0 : getDateControlProps(date)) == null ? void 0 : _a.disabled) && (!hideOutsideDates || isSameMonth(date, month));\n  });\n  const selectedDate = enabledDates.find(date => {\n    var _a;\n    return (_a = getDateControlProps == null ? void 0 : getDateControlProps(date)) == null ? void 0 : _a.selected;\n  });\n  if (selectedDate) {\n    return selectedDate;\n  }\n  const currentDate = enabledDates.find(date => dayjs().isSame(date, \"date\"));\n  if (currentDate) {\n    return currentDate;\n  }\n  return enabledDates[0];\n}\nexport { getDateInTabOrder };","map":{"version":3,"names":["getDateInTabOrder","dates","minDate","maxDate","getDateControlProps","excludeDate","hideOutsideDates","month","enabledDates","flat","filter","date","_a","isBeforeMaxDate","isAfterMinDate","disabled","isSameMonth","selectedDate","find","selected","currentDate","dayjs","isSame"],"sources":["C:\\Users\\dylan\\GitHub\\Reserv\\frontend\\node_modules\\@mantine\\dates\\src\\components\\Month\\get-date-in-tab-order\\get-date-in-tab-order.ts"],"sourcesContent":["import dayjs from 'dayjs';\nimport { DayProps } from '../../Day/Day';\nimport { isAfterMinDate } from '../is-after-min-date/is-after-min-date';\nimport { isBeforeMaxDate } from '../is-before-max-date/is-before-max-date';\nimport { isSameMonth } from '../is-same-month/is-same-month';\n\nexport function getDateInTabOrder(\n  dates: Date[][],\n  minDate: Date | undefined,\n  maxDate: Date | undefined,\n  getDateControlProps: ((date: Date) => Partial<DayProps>) | undefined,\n  excludeDate: ((date: Date) => boolean) | undefined,\n  hideOutsideDates: boolean | undefined,\n  month: Date\n) {\n  const enabledDates = dates\n    .flat()\n    .filter(\n      (date) =>\n        isBeforeMaxDate(date, maxDate) &&\n        isAfterMinDate(date, minDate) &&\n        !excludeDate?.(date) &&\n        !getDateControlProps?.(date)?.disabled &&\n        (!hideOutsideDates || isSameMonth(date, month))\n    );\n\n  const selectedDate = enabledDates.find((date) => getDateControlProps?.(date)?.selected);\n\n  if (selectedDate) {\n    return selectedDate;\n  }\n\n  const currentDate = enabledDates.find((date) => dayjs().isSame(date, 'date'));\n\n  if (currentDate) {\n    return currentDate;\n  }\n\n  return enabledDates[0];\n}\n"],"mappings":";;;;;;AAIO,SAASA,iBAAiBA,CAACC,KAAK,EAAEC,OAAO,EAAEC,OAAO,EAAEC,mBAAmB,EAAEC,WAAW,EAAEC,gBAAgB,EAAEC,KAAK,EAAE;EACpH,MAAMC,YAAY,GAAGP,KAAK,CAACQ,IAAI,EAAE,CAACC,MAAM,CACrCC,IAAI,IAAK;IACR,IAAIC,EAAE;IACN,OAAOC,eAAe,CAACF,IAAI,EAAER,OAAO,CAAC,IAAIW,cAAc,CAACH,IAAI,EAAET,OAAO,CAAC,IAAI,EAAEG,WAAW,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,WAAW,CAACM,IAAI,CAAC,CAAC,IAAI,EAAE,CAACC,EAAE,GAAGR,mBAAmB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,mBAAmB,CAACO,IAAI,CAAC,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGC,EAAE,CAACG,QAAQ,CAAC,KAAK,CAACT,gBAAgB,IAAIU,WAAW,CAACL,IAAI,EAAEJ,KAAK,CAAC,CAAC;EACnS,CACA,CAAG;EACD,MAAMU,YAAY,GAAGT,YAAY,CAACU,IAAI,CAAEP,IAAI,IAAK;IAC/C,IAAIC,EAAE;IACN,OAAO,CAACA,EAAE,GAAGR,mBAAmB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,mBAAmB,CAACO,IAAI,CAAC,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGC,EAAE,CAACO,QAAQ;EACjH,CAAG,CAAC;EACF,IAAIF,YAAY,EAAE;IAChB,OAAOA,YAAY;EACvB;EACE,MAAMG,WAAW,GAAGZ,YAAY,CAACU,IAAI,CAAEP,IAAI,IAAKU,KAAK,EAAE,CAACC,MAAM,CAACX,IAAI,EAAE,MAAM,CAAC,CAAC;EAC7E,IAAIS,WAAW,EAAE;IACf,OAAOA,WAAW;EACtB;EACE,OAAOZ,YAAY,CAAC,CAAC,CAAC;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}