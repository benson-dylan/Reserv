{"ast":null,"code":"'use client';\n\nimport { useRef, useEffect, useMemo } from 'react';\nfunction useCallbackRef(callback) {\n  var callbackRef = useRef(callback);\n  useEffect(function () {\n    callbackRef.current = callback;\n  });\n  return useMemo(function () {\n    return function () {\n      var _a2;\n      var _a;\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return (_a = callbackRef.current) == null ? void 0 : (_a2 = _a).call.apply(_a2, [callbackRef].concat(args));\n    };\n  }, []);\n}\nexport { useCallbackRef };","map":{"version":3,"names":["useCallbackRef","callback","callbackRef","useRef","useEffect","current","useMemo","_a2","_a","_len","arguments","length","args","Array","_key","call","apply","concat"],"sources":["C:\\Users\\vintd\\Documents\\GitHub\\Reserv\\frontend\\node_modules\\@mantine\\hooks\\src\\use-callback-ref\\use-callback-ref.ts"],"sourcesContent":["import { useRef, useEffect, useMemo } from 'react';\n\nexport function useCallbackRef<T extends (...args: any[]) => any>(callback: T | undefined): T {\n  const callbackRef = useRef(callback);\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  return useMemo(() => ((...args) => callbackRef.current?.(...args)) as T, []);\n}\n"],"mappings":";;;AACO,SAASA,cAAcA,CAACC,QAAQ,EAAE;EACvC,IAAMC,WAAW,GAAGC,MAAM,CAACF,QAAQ,CAAC;EACpCG,SAAS,CAAC,YAAM;IACdF,WAAW,CAACG,OAAO,GAAGJ,QAAQ;EAClC,CAAG,CAAC;EACF,OAAOK,OAAO,CAAC;IAAA,OAAM,YAAa;MAAA,IAAAC,GAAA;MAChC,IAAIC,EAAE;MAAC,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EADgBC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;MAAA;MAE3B,OAAO,CAACN,EAAE,GAAGN,WAAW,CAACG,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAG,CAAAE,GAAA,GAAAC,EAAE,EAACO,IAAI,CAAAC,KAAA,CAAAT,GAAA,GAACL,WAAW,EAAAe,MAAA,CAAKL,IAAI,EAAC;IACtF,CAAG;EAAA,GAAE,EAAE,CAAC;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}