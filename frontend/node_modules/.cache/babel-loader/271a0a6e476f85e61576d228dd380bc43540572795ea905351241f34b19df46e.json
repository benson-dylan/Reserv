{"ast":null,"code":"'use client';\n\nimport { useMantineTheme, parseThemeColor } from '@mantine/core';\nfunction useMantineLogoColors({\n  color,\n  inverted\n}) {\n  const theme = useMantineTheme();\n  const parsedColor = parseThemeColor({\n    color: color || \"blue\",\n    theme\n  });\n  const mainColor = parsedColor.isThemeColor ? theme.colors[parsedColor.color][5] : color;\n  return {\n    background: inverted ? theme.white : mainColor,\n    color: inverted ? mainColor : theme.white\n  };\n}\nexport { useMantineLogoColors };","map":{"version":3,"names":["useMantineLogoColors","color","inverted","theme","useMantineTheme","parsedColor","parseThemeColor","mainColor","isThemeColor","colors","background","white"],"sources":["C:\\Users\\vintd\\Documents\\GitHub\\Reserv\\frontend\\node_modules\\@mantine\\ds\\src\\MantineLogo\\use-mantine-logo-colors.ts"],"sourcesContent":["import { MantineColor, parseThemeColor, useMantineTheme } from '@mantine/core';\n\nexport type MantineLogoVariant = 'mantine.dev' | 'ui.mantine.dev';\n\nexport interface LogoProps extends React.ComponentPropsWithoutRef<'svg'> {\n  color?: MantineColor;\n  variant?: MantineLogoVariant;\n  size?: number | string;\n  inverted?: boolean;\n}\n\nexport function useMantineLogoColors({ color, inverted }: LogoProps) {\n  const theme = useMantineTheme();\n  const parsedColor = parseThemeColor({ color: color || 'blue', theme });\n  const mainColor = parsedColor.isThemeColor ? theme.colors[parsedColor.color][5] : color;\n\n  return {\n    background: inverted ? theme.white : mainColor,\n    color: inverted ? mainColor : theme.white,\n  };\n}\n"],"mappings":";;;AACO,SAASA,oBAAoBA,CAAC;EAAEC,KAAK;EAAEC;AAAQ,CAAE,EAAE;EACxD,MAAMC,KAAK,GAAGC,eAAe,EAAE;EAC/B,MAAMC,WAAW,GAAGC,eAAe,CAAC;IAAEL,KAAK,EAAEA,KAAK,IAAI,MAAM;IAAEE;EAAK,CAAE,CAAC;EACtE,MAAMI,SAAS,GAAGF,WAAW,CAACG,YAAY,GAAGL,KAAK,CAACM,MAAM,CAACJ,WAAW,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC,GAAGA,KAAK;EACvF,OAAO;IACLS,UAAU,EAAER,QAAQ,GAAGC,KAAK,CAACQ,KAAK,GAAGJ,SAAS;IAC9CN,KAAK,EAAEC,QAAQ,GAAGK,SAAS,GAAGJ,KAAK,CAACQ;EACxC,CAAG;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}